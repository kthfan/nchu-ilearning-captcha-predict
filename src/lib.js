
const

function load_js(src){
	let script = document.createElement("script");
	script.src = src;
	script.async = true;
	document.body.appendChild(script);
	let [ok, err] = [null, null]; 
	let promise = new Promise((resolve, reject) => {
		ok = resolve;
		err = reject;
	});
	// let timdId = setTimeout(()=>ok(), 5000); // wait for 5s.
	script.onload = () => {
		//clearTimeout(timdId);
		ok();
	}
	return promise;
}

function convertByColor(I){
	// let len = I.data.length;
	// for(let i=0; i<len; i+=4){
	// 	if(I.data[i] >= 170) I.data[i] = 255;
	// }
	// for(let i=1; i<len; i+=4){
	// 	if(I.data[i] >= 150) I.data[i] = 255;
	// }
	// for(let i=2; i<len; i+=4){
	// 	if(I.data[i] >= 150) I.data[i] = 255;
	// }
	cv.cvtColor(I, I, cv.COLOR_RGB2GRAY);
    cv.threshold(I, I, 100, 255, cv.THRESH_BINARY_INV);
    return I;
}

function splitImage(I){
	let tmp = I;
	I = tf.tensor(I.data, [I.rows, I.cols]);
	tmp.delete();
	I = tf.slice(I, [3, 11], [20, 79]);
	let [h, w] = I.shape;
	let w2 = Number.parseInt(w/6);
	let s = new cv.Scalar(0, 0, 0, 255);
	let result = Array.from(Array(6))
		.map((_, i) => tf.slice(I, [0, i*w2], [I.shape[0], w2]))
		.map(img => cv.matFromArray(img.shape[0], img.shape[1], cv.CV_8U, img.dataSync()))
		.map(img => (cv.copyMakeBorder(img, img, 4,4,7,8, cv.BORDER_CONSTANT, s), img));
	
	return result
}
function imagesToTensors(image_list){
	var result = image_list
		.map(img => tf.tensor(img.data, [1, img.rows, img.cols, 1]));
	image_list.forEach(img => img.delete());
	return tf.concat(result, 0);
}
function loadWeights(model, weights){
	weights = weights.map(w => tf.tensor(w));
	model.setWeights(weights);
}
function build_model(){


	let inputs = tf.input({shape:[28, 28, 1], name:'inputs'});
	
	let conv1 = tf.layers.conv2d({filters :1, kernelSize: 5, name:'conv1'}).apply(inputs);
	let pool1 = tf.layers.maxPool2d({poolSize :[4, 4], name:'pool1'}).apply(conv1);
	let flatten = tf.layers.flatten({name: "flatten"}).apply(pool1);
	let dense1 = tf.layers.dense({units:1, name:"dense1"}).apply(flatten);
	let dense2 = tf.layers.dense({units:1, name:"dense2"}).apply(flatten);
	let dense3 = tf.layers.dense({units:1, name:"dense3"}).apply(flatten);
	let dense4 = tf.layers.dense({units:1, name:"dense4"}).apply(flatten);
	let concat = tf.layers.concatenate({axis: 1, name:"concat"}).apply([dense1, dense2, dense3, dense4])
	let drop1 = tf.layers.dropout({rate: 0.2, name:"drop1"}).apply(concat);
	let outputs = tf.layers.dense({units: 10, activation: "softmax", name:"outputs"}).apply(drop1);

	let model = tf.model({inputs: inputs, outputs: outputs});
	
	// model.compile({optimizer: 'adam',loss: 'categoricalCrossentropy',metrics: ['accuracy']})
	// model.summary()
	return model;
}

function predict(model, imgElem){
	let I = cv.imread(imgElem);
	I = convertByColor(I);
	let images = splitImage(I);
	let tensors = imagesToTensors(images);
	let pY = model.predict(tensors);
	return pY.argMax(1).arraySync().join("");
}
